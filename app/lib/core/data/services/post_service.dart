import 'dart:io';

import 'package:path/path.dart' as path;
import 'package:sendspace/core/data/dto/tables/posts.dart';
import 'package:sendspace/core/failures/failure.dart';
import 'package:sendspace/core/mixins/s3_bucket_mixin.dart';
import 'package:sendspace/core/mixins/video.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

abstract class PostService {
  Future<void> createPost({required PostsRow post, File? videoFile});

  Future<List<PostsRow>> getUserPosts();
}

class SupabasePostService extends PostService with S3BucketMixin, VideoMixin {
  final SupabaseClient _client;

  SupabasePostService(this._client);

  String get bucketName => 'post_videos';
  String get tableName => 'posts';

  @override
  /// Creates a post and optionally uploads a video
  Future<void> createPost({required PostsRow post, File? videoFile}) async {
    try {
      final user = _client.auth.currentUser;
      if (user == null) {
        throw AuthException("User not authenticated");
      }

      // TODO: should only support mp4 and webm

      String? videoUrl;
      String? thumbnailUrl;
      if (videoFile != null) {
        // Generate thumbnail
        // TODO matt debug here, it's not actually generating thumbnail
        final thumbnailImageData = await generateThumbnailFromVideo(videoFile);
        videoUrl = await uploadObjectFromFile(
          client: _client,
          bucketName: bucketName,
          file: videoFile,
          objectKey: generateObjectKey(_client, 'video', "mp4"),
        );
        if (thumbnailImageData != null) {
          thumbnailUrl = await uploadObjectFromBinary(
            client: _client,
            bucketName: bucketName,
            data: thumbnailImageData,
            objectKey: generateObjectKey(
              _client,
              'thumbnail',
              thumbnailImageFormat,
            ),
          );
        }
      }

      final json =
          post.toJson()
            ..['video_url'] = videoUrl
            ..['thumbnail_url'] = thumbnailUrl
            ..['created_at'] = DateTime.now().toIso8601String()
            ..['user_id'] = user.id;

      // Remove ID if present, since it's auto-generated by the database
      json.remove('id');

      await _client.from(tableName).insert(json);
    } catch (e, st) {
      rethrow;
    }
  }

  @override
  Future<List<PostsRow>> getUserPosts() async {
    final userId = _client.auth.currentUser?.id;

    if (userId == null) {
      throw AuthFailure("User is not authenticated.");
    }

    try {
      final response = await _client
          .from(tableName)
          .select()
          .eq('user_id', userId)
          .order('created_at', ascending: false);

      return (response as List)
          .map((json) => PostsRow.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      return Future.error(e);
    }
  }
}
