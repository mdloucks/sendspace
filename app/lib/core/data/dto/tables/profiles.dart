//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Profiles Table
class ProfilesTable extends SupabaseTable<ProfilesRow> {
  /// Table Name
  @override
  String get tableName => 'profiles';

  /// Create a [ProfilesRow] from the [data] provided
  @override
  ProfilesRow createRow(Map<String, dynamic> data) =>
      ProfilesRow.fromJson(data);
}

/// Profiles Row
class ProfilesRow extends SupabaseDataRow {
  /// Profiles Row
  ProfilesRow({
    required String id,
    required String displayName,
    required String userName,
    String? bio,
    String? profileImageUrl,
    String? climbingLevel,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) : super({
         'id': supaSerialize(id),
         'display_name': supaSerialize(displayName),
         'user_name': supaSerialize(userName),
         if (bio != null) 'bio': supaSerialize(bio),
         if (profileImageUrl != null)
           'profile_image_url': supaSerialize(profileImageUrl),
         if (climbingLevel != null)
           'climbing_level': supaSerialize(climbingLevel),
         if (createdAt != null) 'created_at': supaSerialize(createdAt),
         if (updatedAt != null) 'updated_at': supaSerialize(updatedAt),
       });

  /// Profiles Row
  const ProfilesRow._(super.data);

  /// Create Profiles Row from a [data] map
  factory ProfilesRow.fromJson(Map<String, dynamic> data) =>
      ProfilesRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => ProfilesTable();

  /// Id field name
  static const String idField = 'id';

  /// Id
  String get id => getField<String>(idField)!;
  set id(String value) => setField<String>(idField, value);

  /// Display Name field name
  static const String displayNameField = 'display_name';

  /// Display Name
  String get displayName => getField<String>(displayNameField)!;
  set displayName(String value) => setField<String>(displayNameField, value);

  /// User Name field name
  static const String userNameField = 'user_name';

  /// User Name
  String get userName => getField<String>(userNameField)!;
  set userName(String value) => setField<String>(userNameField, value);

  /// Bio field name
  static const String bioField = 'bio';

  /// Bio
  String? get bio => getField<String>(bioField);
  set bio(String? value) => setField<String>(bioField, value);

  /// Profile Image Url field name
  static const String profileImageUrlField = 'profile_image_url';

  /// Profile Image Url
  String? get profileImageUrl => getField<String>(profileImageUrlField);
  set profileImageUrl(String? value) =>
      setField<String>(profileImageUrlField, value);

  /// Climbing Level field name
  static const String climbingLevelField = 'climbing_level';

  /// Climbing Level
  String? get climbingLevel => getField<String>(climbingLevelField);
  set climbingLevel(String? value) =>
      setField<String>(climbingLevelField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime get createdAt =>
      getField<DateTime>(createdAtField, defaultValue: DateTime.now())!;
  set createdAt(DateTime value) => setField<DateTime>(createdAtField, value);

  /// Updated At field name
  static const String updatedAtField = 'updated_at';

  /// Updated At
  DateTime get updatedAt =>
      getField<DateTime>(updatedAtField, defaultValue: DateTime.now())!;
  set updatedAt(DateTime value) => setField<DateTime>(updatedAtField, value);

  /// Make a copy of the current [ProfilesRow]
  /// overriding the provided fields
  ProfilesRow copyWith({
    String? id,
    String? displayName,
    String? userName,
    String? bio,
    String? profileImageUrl,
    String? climbingLevel,
    DateTime? createdAt,
    DateTime? updatedAt,
  }) => ProfilesRow.fromJson({
    'id': supaSerialize(id) ?? data['id'],
    'display_name': supaSerialize(displayName) ?? data['display_name'],
    'user_name': supaSerialize(userName) ?? data['user_name'],
    'bio': supaSerialize(bio) ?? data['bio'],
    'profile_image_url':
        supaSerialize(profileImageUrl) ?? data['profile_image_url'],
    'climbing_level': supaSerialize(climbingLevel) ?? data['climbing_level'],
    'created_at': supaSerialize(createdAt) ?? data['created_at'],
    'updated_at': supaSerialize(updatedAt) ?? data['updated_at'],
  });
}

/// Date: 2025-09-22 22:13:30.433040
