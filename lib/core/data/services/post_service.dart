import 'dart:io';

import 'package:path/path.dart' as path;
import 'package:sendspace/core/data/models/post.codegen.dart';
import 'package:sendspace/core/failures/failure.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

abstract class PostService {
  Future<void> createPost({required Post post, File? videoFile});

  Future<List<Post>> getUserPosts();
  Future<void> uploadVideo(File file);
}

class SupabasePostService extends PostService {
  final SupabaseClient _client;

  SupabasePostService(this._client);

  String get bucketName => 'post_videos';
  String get tableName => 'posts';

  @override
  /// Creates a post and optionally uploads a video
  Future<void> createPost({required Post post, File? videoFile}) async {
    final user = _client.auth.currentUser;
    if (user == null) {
      throw AuthException("User not authenticated");
    }

    String? videoUrl;
    if (videoFile != null) {
      videoUrl = await uploadVideo(videoFile);
    }

    final json =
        post.toJson()
          ..['video_url'] = videoUrl
          ..['created_at'] = DateTime.now().toIso8601String()
          ..['user_id'] = user.id;

    // Remove ID if present, since it's auto-generated by the database
    json.remove('id');

    await _client.from(tableName).insert(json);
  }

  @override
  Future<List<Post>> getUserPosts() async {
    final userId = _client.auth.currentUser?.id;

    if (userId == null) {
      throw AuthFailure("User is not authenticated.");
    }

    try {
      final response = await _client
          .from(tableName)
          .select()
          .eq('user_id', userId)
          .order('created_at', ascending: false);

      return (response as List)
          .map((json) => Post.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      return Future.error(e);
    }
  }

  @override
  /// Uploads a video and returns the public URL
  Future<String> uploadVideo(File videoFile) async {
    final fileName = path.basename(videoFile.path);
    final fileKey = 'uploads/$fileName';

    final response = await _client.storage
        .from(bucketName)
        .upload(fileKey, videoFile);

    if (response.isEmpty) {
      throw Exception('Video upload failed');
    }

    return _client.storage.from(bucketName).getPublicUrl(fileKey);
  }
}
