//
//  Generated file. Do not edit.
//  Generated by supabase_codegen (1.4.0)
//
// ignore_for_file: require_trailing_commas, constant_identifier_names

import 'package:supabase_codegen/supabase_codegen.dart';
// Import enums if needed
// ignore: unused_import, always_use_package_imports
import '../database.dart';

/// Profiles Table
class ProfilesTable extends SupabaseTable<ProfilesRow> {
  /// Table Name
  @override
  String get tableName => 'profiles';

  /// Create a [ProfilesRow] from the [data] provided
  @override
  ProfilesRow createRow(Map<String, dynamic> data) =>
      ProfilesRow.fromJson(data);
}

/// Profiles Row
class ProfilesRow extends SupabaseDataRow {
  /// Profiles Row
  ProfilesRow({
    required String id,
    String? username,
    String? avatarUrl,
    String? bio,
    DateTime? createdAt,
  }) : super({
         'id': supaSerialize(id),
         if (username != null) 'username': supaSerialize(username),
         if (avatarUrl != null) 'avatar_url': supaSerialize(avatarUrl),
         if (bio != null) 'bio': supaSerialize(bio),
         if (createdAt != null) 'created_at': supaSerialize(createdAt),
       });

  /// Profiles Row
  const ProfilesRow._(super.data);

  /// Create Profiles Row from a [data] map
  factory ProfilesRow.fromJson(Map<String, dynamic> data) =>
      ProfilesRow._(data.cleaned);

  /// Get the Json representation of the row
  Map<String, dynamic> toJson() => data;

  /// Get the [SupabaseTable] for this row
  @override
  SupabaseTable get table => ProfilesTable();

  /// Id field name
  static const String idField = 'id';

  /// Id
  String get id => getField<String>(idField)!;
  set id(String value) => setField<String>(idField, value);

  /// Username field name
  static const String usernameField = 'username';

  /// Username
  String? get username => getField<String>(usernameField);
  set username(String? value) => setField<String>(usernameField, value);

  /// Avatar Url field name
  static const String avatarUrlField = 'avatar_url';

  /// Avatar Url
  String? get avatarUrl => getField<String>(avatarUrlField);
  set avatarUrl(String? value) => setField<String>(avatarUrlField, value);

  /// Bio field name
  static const String bioField = 'bio';

  /// Bio
  String? get bio => getField<String>(bioField);
  set bio(String? value) => setField<String>(bioField, value);

  /// Created At field name
  static const String createdAtField = 'created_at';

  /// Created At
  DateTime get createdAt =>
      getField<DateTime>(createdAtField, defaultValue: DateTime.now())!;
  set createdAt(DateTime value) => setField<DateTime>(createdAtField, value);

  /// Make a copy of the current [ProfilesRow]
  /// overriding the provided fields
  ProfilesRow copyWith({
    String? id,
    String? username,
    String? avatarUrl,
    String? bio,
    DateTime? createdAt,
  }) => ProfilesRow.fromJson({
    'id': supaSerialize(id) ?? data['id'],
    'username': supaSerialize(username) ?? data['username'],
    'avatar_url': supaSerialize(avatarUrl) ?? data['avatar_url'],
    'bio': supaSerialize(bio) ?? data['bio'],
    'created_at': supaSerialize(createdAt) ?? data['created_at'],
  });
}

/// Date: 2025-08-05 23:44:48.436
